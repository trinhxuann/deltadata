[{"path":"https://trinhxuann.github.io/deltadata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 deltadata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://trinhxuann.github.io/deltadata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Trinh Nguyen. Author, maintainer.","code":""},{"path":"https://trinhxuann.github.io/deltadata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nguyen T (2024). deltadata: Various functions acquiring data within SFE. R package version 0.0.0.9000, https://trinhxuann.github.io/deltadata/.","code":"@Manual{,   title = {deltadata: Various functions for acquiring data within the SFE},   author = {Trinh Nguyen},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://trinhxuann.github.io/deltadata/}, }"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"deltadata-","dir":"","previous_headings":"","what":"Various functions for acquiring data within the SFE","title":"Various functions for acquiring data within the SFE","text":"package contains various workflow functions working data within Sacramento-San Joaquin River Delta. primary focus IEP (Interagency Ecological Program) Surveys supporting data publication workflow. Additional features pertaining surveys may supported future.","code":"library(deltadata) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal)"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Various functions for acquiring data within the SFE","text":"deltadata package can installed GitHub repository.","code":"# Install `devtools` if we need to install.packages(\"devtools\")  # Installing `deltadata` if we do not already have it devtools::install_github(\"trinhxuann/deltadata\")"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"reading-in-the-data","dir":"","previous_headings":"","what":"Reading in the data","title":"Various functions for acquiring data within the SFE","text":"bridgeAccess() function can used connect Access database extract tables interest. First foremost, must ensure architecture R Microsoft Access (32 vs 64-bit). function check us provide interpretable error match. state computers, 32-bit Microsoft Access means must 32-bit R function work. newest version R supports 32-bit 4.1.3 (newer versions R longer support 32-bit architecture, ideal). satisfied, can work 64-bit R 32-bit R invoked appropriate. installing 32-bit R option, 64-bit Microsoft Access must installed use function 64-bit R. Basically, architecture R must match Microsoft Access, satisfied, function can run. function can connect directly URL source file hard drive. connecting URL, suggested download zipped source minimize file size–function extract Access file zipped file. provide file path function, lost available tables provided us explore. function can also access system tables, however, prompted provide file permissions function can pull tables. case study, work SLS Survey: First, download database (zipped form) explore tables available extract–database file downloaded long remain R session (downloaded temporary folder): SLS 7 main relational tables interest: can also download relationship table. important table records relationships relational tables. Unfortunately, table require special permissions; fortunately, can easily give necessary permission. first try pull table, error given Access file opened. function output console’s error message instructions give permissions: program, “Enable content, Ctrl + g, enter CurrentProject.Connection.Execute \"GRANT SELECT MSysRelationships Admin;\", Enter, exit file, rerun code.”","code":"bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\") #> Extracting file: 'SLS.mdb' from the zip file. #> Specify at least one table to pull from:  #>  [1] \"MSysAccessObjects\"          \"MSysACEs\"                   #>  [3] \"MSysNameMap\"                \"MSysNavPaneGroupCategories\" #>  [5] \"MSysNavPaneGroups\"          \"MSysNavPaneGroupToObjects\"  #>  [7] \"MSysNavPaneObjectIDs\"       \"MSysObjects\"                #>  [9] \"MSysQueries\"                \"MSysRelationships\"          #> [11] \"Catch\"                      \"FishCodes\"                  #> [13] \"Lengths\"                    \"Meter Corrections\"          #> [15] \"SLS Stations\"               \"Tow Info\"                   #> [17] \"Water Info\" slsTables <- bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\",                           tables = c(\"Catch\", \"FishCodes\", \"Lengths\", \"Meter Corrections\",                                      \"SLS Stations\", \"Tow Info\", \"Water Info\")) schema <- bridgeAccess(   \"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\",   tables = c(\"MSysRelationships\"), retry = T   ) #> You are asking for a system table but do not have permissions. Opening the database file to allow you to do so. #> Enable content, `Ctrl + g`, enter `CurrentProject.Connection.Execute \"GRANT SELECT ON MSysRelationships TO Admin;\"`, `Enter`. Will retry once after 25 seconds. #> Retrying...  # The function outputs a list, of which we can index to grab just the table schema <- schema[[1]]"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"data-joining","dir":"","previous_headings":"","what":"Data joining","title":"Various functions for acquiring data within the SFE","text":"schema table contains instructions join relational tables together. schemaJoin() function deciphers table joining us. approach theoretically preferable compared joining hand removes guesswork join tables together–absolute though, since depends database set correctly first place. Throughout joining process, function provides narration join type, two relational tables joined, column keys join occurring . can use narration ensure getting joins expecting. joins want, function can take schema table, .e., can modify join type(s) like function use specifying joinType column schema table. four join options : full_join, inner_join, left_join, right_join.","code":"joinedData <- schemaJoin(schema, slsTables) #> inner_join 'Catch' with 'Lengths' via columns 'Date' 'Station' 'Tow' 'FishCode' and 'Date' 'Station' 'Tow' 'FishCode'  #> inner_join 'Catch' with 'Tow Info' via columns 'Date' 'Station' 'Tow' and 'Date' 'Station' 'Tow'  #> inner_join 'Tow Info' with 'Water Info' via columns 'Date' 'Station' and 'Date' 'Station' schemaFullJoin <- schema schemaFullJoin$joinType <- \"full_join\" joinedDataFullJoin <- schemaJoin(schemaFullJoin, slsTables) #> full_join 'Catch' with 'Lengths' via columns 'Date' 'Station' 'Tow' 'FishCode' and 'Date' 'Station' 'Tow' 'FishCode'  #> full_join 'Catch' with 'Tow Info' via columns 'Date' 'Station' 'Tow' and 'Date' 'Station' 'Tow'  #> full_join 'Tow Info' with 'Water Info' via columns 'Date' 'Station' and 'Date' 'Station'  # Would expect number of rows to differ between an inner vs full join data.frame(joinType = c(\"auto\", \"fullJoin\"),            nRows = c(nrow(joinedData), nrow(joinedDataFullJoin)),            nCols = c(ncol(joinedData), ncol(joinedDataFullJoin))) #>   joinType  nRows nCols #> 1     auto 195473    33 #> 2 fullJoin 195648    33"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"aside-on-schemajoin","dir":"","previous_headings":"Data joining","what":"Aside on schemaJoin()","title":"Various functions for acquiring data within the SFE","text":"Besides supplying join type schema table, can also provide manipulated relational tables function, e.g., tables slsTables example . several reasons may required: 1) want sure columns read correctly, e.g., date data Date format, 2) column names need change, 3) unit conversion, 4) reasons. Ultimately, function simply looks schema table applies joins provided data–can manipulate either argument like.","code":""},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"checking-gps-coordinate-outliers","dir":"","previous_headings":"","what":"Checking GPS coordinate outliers","title":"Various functions for acquiring data within the SFE","text":"Two functions dedicated checking outlying GPS coordinates: plotGPS(): plots sampling GPS coordinates leaflet map. Requires data frame 6 columns, date, station, legend, layer, lat, lon. legend column determines color labels plotted points, recommended one group theoretical coordinates sampling station. layer column determines layer control output map generally survey number. See ?plotGPS() information. gpsOutlier(): returns data frame GPS coordinates beyond specified distance (default 0.5 mile, measured “--crow-flies”, direct path, takes account curvature Earth) point’s theoretical coordinates. function also requires data frame 6 columns, plotGPS(), firm requirement Theoretical (named ) group GPS coordinates labeled legend column.  plotGPS() allows us quickly visualize GPS coordinates. useful also visualize theoretical coordinates alongside points interest. outputted leaflet map several useful features: 1) interactive map can zoom move around, 2) legend multiple groupings sampling location, 3) layer controls allow us see layers want, 4) labeled GPS point also provides additional data clicked upon. function allows us quickly see egregious outliers. can also finer search outliers using gpsOutlier(). function calculates distance sampling point location’s theoretical GPS coordinates returns points exceeds distance threshold (defaults 0.5 mile). implies must supply theoretical GPS coordinates sampling points function recommended construct GPS data frame include theoretical using plotGPS(). data frame output gpsOutlier() format required plotGPS(), allowing us pipe two together.  outputted data frame gpsOutlier() feature outlier column alongside distance theoretical point distance. default distance threshold 0.5 mile ideal target CDFW survey trawls.","code":"gpsDF <- slsTables[[\"Water Info\"]] gpsDF$SeasonYear <- as.numeric(format(gpsDF$Date, format = \"%Y\")) +    (as.numeric(format(gpsDF$Date, format = \"%m\")) > 11) gpsDF <- subset(gpsDF, SeasonYear == 2023)  # Split lat/lon into degrees for (i in c(\"StartLat\", \"StartLong\", \"EndLat\", \"EndLong\")) {   gpsDF[[i]] <- gsub(\"[-. ]\", \"\", gpsDF[[i]]) }  # Creating a function to do this since we'll be reusing it later: createGPS <- function(data) {    data$StartLatD <- as.numeric(substr(data$StartLat, 1, 2))   data$StartLatM <- as.numeric(substr(data$StartLat, 3, 4))   data$StartLatS <- as.numeric(substr(data$StartLat, 5, 7))   data$EndLatD <- as.numeric(substr(data$EndLat, 1, 2))   data$EndLatM <- as.numeric(substr(data$EndLat, 3, 4))   data$EndLatS <- as.numeric(substr(data$EndLat, 5, 7))   data$StartLonD <- as.numeric(substr(data$StartLong, 1, 3))   data$StartLonM <- as.numeric(substr(data$StartLong, 4, 5))   data$StartLonS <- as.numeric(substr(data$StartLong, 6, 8))   data$EndLonD <- as.numeric(substr(data$EndLong, 1, 3))   data$EndLonM <- as.numeric(substr(data$EndLong, 4, 5))   data$EndLonS <- as.numeric(substr(data$EndLong, 6, 8))   # Note the seconds calculation here. 36000 due to format of the LatS columns   data$Start_lat <- data$StartLatD + data$StartLatM/60 + data$StartLatS/36000   data$End_lat <- data$EndLatD + data$EndLatM/60 + data$EndLatS/36000   data$Start_lon <- -(data$StartLonD + data$StartLonM/60 + data$StartLonS/36000)   data$End_lon <- -(data$EndLonD + data$EndLonM/60 + data$EndLonS/36000)    data }  gpsDF <- createGPS(gpsDF) # Required columns for plotGPS() gpsDF$date <- gpsDF$SeasonYear gpsDF$layer <- gpsDF$Survey  # GPS start coordinates gpsLat<- gpsDF[, which(!names(gpsDF) %in% c(\"Start_lon\", \"End_lon\"))] gpsLat <- reshape(gpsLat, direction = \"long\",                         varying = c(\"Start_lat\", \"End_lat\"),                         v.names = \"lat\",                         times = c(\"Start\", \"End\"),                         timevar = \"legend\")  gpsLon<- gpsDF[, which(!names(gpsDF) %in% c(\"Start_lat\", \"End_lat\"))] gpsLon <- reshape(gpsLon, direction = \"long\",                   varying = c(\"Start_lon\", \"End_lon\"),                   v.names = \"lon\",                   times = c(\"Start\", \"End\"),                   timevar = \"legend\")  gpsDFLong <- cbind(gpsLat, lon = gpsLon$lon)  # Joining in the theoretical coordinates gpsTheoretical <- slsTables$`SLS Stations`  for (i in c(\"LatD\", \"LatM\", \"LatS\", \"LonD\", \"LonM\", \"LonS\")) {   gpsTheoretical[[i]] <- as.numeric(gpsTheoretical[[i]]) }  gpsTheoretical$lat <- gpsTheoretical$LatD + gpsTheoretical$LatM/60 +    gpsTheoretical$LatS/3600 gpsTheoretical$lon <- -(gpsTheoretical$LonD + gpsTheoretical$LonM/60 +                            gpsTheoretical$LonS/3600) gpsTheoretical$legend <- \"Theoretical\" gpsTheoretical$layer <- \"Theoretical\" gpsTheoretical$date <- NA  gpsData <- rbind(gpsDFLong[, c(\"date\", \"Station\", \"legend\", \"layer\", \"lat\",                                 \"lon\")],                  gpsTheoretical[, c(\"date\", \"Station\", \"legend\", \"layer\", \"lat\",                                      \"lon\")])  # Can leave the NAs in, but plotGPS will throw back warnings about them gpsData <- subset(gpsData, !is.na(lat) | !is.na(lon))  # layerName and dateName are specific to the popup labels at each point. plotGPS(gpsData, layerName = \"Survey\", dateName = \"Year\", height = 500) # By default, d = 0.5 gpsOutliersData <- gpsOutlier(gpsData)  plotGPS(gpsOutliersData, height = 500) head(gpsOutliersData) #>           date Station legend layer      lat       lon lonTheoretical #> 413.End   2023     723    End     6 38.69222 -121.6719      -121.6731 #> 389.End   2023     330    End     5 38.01586 -122.3822      -122.3282 #> 389.Start 2023     330  Start     5 38.02122 -122.3821      -122.3282 #> 130.End   2023     336    End     1 38.05789 -122.3248      -122.2780 #> 130.Start 2023     336  Start     1 38.05925 -122.3032      -122.2780 #> 127.End   2023     329    End     1 38.06406 -122.3238      -122.3040 #>           latTheoretical  distance outlier #> 413.End         38.23725 31.382077    TRUE #> 389.End         38.02853  3.075955    TRUE #> 389.Start       38.02853  2.987429    TRUE #> 130.End         38.06111  2.560575    TRUE #> 130.Start       38.06111  1.378380    TRUE #> 127.End         38.06361  1.078905    TRUE"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"comparing-water-quality-values-to-cdec-gages","dir":"","previous_headings":"","what":"Comparing water quality values to CDEC gages","title":"Various functions for acquiring data within the SFE","text":"popCDEC() used populate data frame sampling points water temperature, water turbidity, water electroconductivity data nearest CDEC gage. metrics currently supported. input data frame requires least five columns: 1) station (name sampling point), 2) lat (latitude sampling point), 3) lon (longitude sampling point), 4) time (date-time sample), 5) water quality variable interest (temp, ec, turbidity). sampling point, function return desired water quality data nearest CDEC station sampling point, terms space (--crow-flies) time. function also reports back various metadata: nearest CDEC station (cdecStation), time difference minutes sample interest CDEC sample (timeDifference), distance miles sampling point CDEC station (distance), metadata information CDEC station (sensorNumber, sensorDescription, units, duration, dataAvailable).","code":"# Using the joined SLS data as an example waterQualityData <- subset(   joinedData, format(Date, format = \"%Y\") == \"2023\" &     Survey == 1 & (!is.na(StartLat) | !is.na(StartLong))   )  # Split lat/lon into degrees for (i in c(\"StartLat\", \"StartLong\", \"EndLat\", \"EndLong\")) {   waterQualityData[[i]] <- gsub(\"[-. ]\", \"\", waterQualityData[[i]]) } # createGPS is a helper function defined on line 108 above. waterQualityData <- createGPS(waterQualityData) waterQualityData$time <- paste(   waterQualityData$Date,    format(waterQualityData$Time, format = \"%H:%M:%S\")   ) waterQualityData <- unique(waterQualityData[, c(\"Station\", \"Start_lat\",                                                  \"Start_lon\", \"time\",                                                 \"TopTemp\", \"TopEC\", \"NTU\")]) waterQualityData <- unique(waterQualityData[, names(waterQualityData)]) names(waterQualityData) <- c(\"Station\", \"lat\", \"lon\", \"time\",                               \"temp\", \"ec\", \"turbidity\")  cdecTable <- popCDEC(waterQualityData) head(cdecTable) #>   station      lat       lon                time cdecStation temp tempCDEC #> 1     306 38.00064 -122.4145 2023-01-03 11:36:00         MRZ 10.4 9.555556 #> 2     308 38.01542 -122.4095 2023-01-03 11:14:00         MRZ 10.5 9.555556 #> 3     311 38.02083 -122.3827 2023-01-03 12:01:00         MRZ 10.1 9.555556 #> 4     315 38.03833 -122.3926 2023-01-03 10:52:00         MRZ 10.2 9.555556 #> 5     322 38.02550 -122.3524 2023-01-03 12:27:00         MRZ 10.1 9.555556 #> 6     323 38.03958 -122.2944 2023-01-03 13:14:00         MRZ 10.0 9.500000 #>   timeDifference  distance sensorNumber         sensorDescription units #> 1         9 mins 15.067258           25 TEMPERATURE, WATER, DEG F DEG C #> 2        31 mins 14.700119           25 TEMPERATURE, WATER, DEG F DEG C #> 3         1 mins 13.222769           25 TEMPERATURE, WATER, DEG F DEG C #> 4        53 mins 13.772100           25 TEMPERATURE, WATER, DEG F DEG C #> 5         3 mins 11.561585           25 TEMPERATURE, WATER, DEG F DEG C #> 6         1 mins  8.437388           25 TEMPERATURE, WATER, DEG F DEG C #>   duration         dataAvailable #> 1    event 08/21/2008 to present #> 2    event 08/21/2008 to present #> 3    event 08/21/2008 to present #> 4    event 08/21/2008 to present #> 5    event 08/21/2008 to present #> 6    event 08/21/2008 to present"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"notes-on-the-nuanced-operations-by-popcdec","dir":"","previous_headings":"Comparing water quality values to CDEC gages","what":"Notes on the nuanced operations by popCDEC()","title":"Various functions for acquiring data within the SFE","text":"several underlying operations function aware : nearest CDEC station calculated based --crow-flies distance reported value CDEC station closest time point requested sampling point data. means NA data CDEC station ignored, even sampling points closer time sample. reported value closest valid value time sampling occurred. function scrapes CDEC website can get bogged increase number data points populate /range dates initial dataset. also dependent internet connection speed CDEC website multiple sampling points interest provided, absolute date range dataset used download data CDEC station interest. nuanced can safely ignored instances.","code":""},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"pullcdec","dir":"","previous_headings":"Comparing water quality values to CDEC gages","what":"pullCDEC","title":"Various functions for acquiring data within the SFE","text":"Function popCDEC relies pullCDEC() background pull data CDEC gages. function can used stand-alone function obtain data CDEC station. Since difficult remember data available CDEC station, function constructed guide us selecting necessary arguments know exactly want. begin, can provide function just station name: function provides us current available metadata station MAL can specify arguments. , skip specifying required arguments, function can take smaller steps, e.g., provide just sensor number duration, function filters options provide associated date range. function provide requested data directly R arguments provided.","code":"pullCDEC(station = \"MAL\") #> # A tibble: 33 x 7 #>    sensorDescription                     sensorNumber duration plot       #>    <chr>                                        <int> <chr>    <chr>      #>  1 RIVER STAGE, FEET                                1 event    (RIV STG)  #>  2 RIVER STAGE, FEET                                1 hourly   (RIV STG)  #>  3 TEMPERATURE, AIR, DEG F                          4 event    (TEMP)     #>  4 TEMPERATURE, AIR, DEG F                          4 hourly   (TEMP)     #>  5 ELECTRICAL CONDUCTIVTY MILLI S, mS/cm            5 daily    (EL CND)   #>  6 ELECTRICAL CONDUCTIVTY MILLI S, mS/cm            5 hourly   (EL CND)   #>  7 WIND, SPEED, MPH                                 9 event    (WIND SP)  #>  8 WIND, SPEED, MPH                                 9 hourly   (WIND SP)  #>  9 WIND, DIRECTION, DEG                            10 event    (WIND DR)  #> 10 WIND, DIRECTION, DEG                            10 hourly   (WIND DR)  #> 11 BATTERY VOLTAGE, VOLTS                          14 event    (BAT VOL)  #> 12 BATTERY VOLTAGE, VOLTS                          14 hourly   (BAT VOL)  #> 13 FLOW, RIVER DISCHARGE, CFS                      20 event    (FLOW)     #> 14 WATER, VELOCITY, FT/SEC                         21 event    (VLOCITY)  #> 15 TEMPERATURE, WATER, DEG F                       25 event    (TEMP W)   #> 16 TEMPERATURE, WATER, DEG F                       25 hourly   (TEMP W)   #> 17 SOLAR RADIATION, W/M^2                          26 event    (SOLAR R)  #> 18 SOLAR RADIATION, W/M^2                          26 hourly   (SOLAR R)  #> 19 WATER, TURBIDITY,   NTU                         27 event    (TURB W)   #> 20 WATER, TURBIDITY,   NTU                         27 hourly   (TURB W)   #> 21 CHLOROPHYLL, ug/L                               28 event    (CHLORPH)  #> 22 CHLOROPHYLL, ug/L                               28 hourly   (CHLORPH)  #> 23 WATER, DISSOLVED OXYGEN,  MG/L                  61 event    (DIS OXY)  #> 24 WATER, DISSOLVED OXYGEN,  MG/L                  61 hourly   (DIS OXY)  #> 25 WATER, PH VALUE, PH                             62 event    (PH VAL)   #> 26 WATER, PH VALUE, PH                             62 hourly   (PH VAL)   #> 27 ELECTRICAL COND BOTTOM MILLI S, mS/cm           92 hourly   (EL CONDB) #> 28 ELECTRICAL CONDUCTIVTY MICRO S, uS/cm          100 daily    (EL COND)  #> 29 ELECTRICAL CONDUCTIVTY MICRO S, uS/cm          100 event    (EL COND)  #> 30 ELECTRICAL CONDUCTIVTY MICRO S, uS/cm          100 hourly   (EL COND)  #> 31 ELECTRICAL COND BOTTOM MICRO S, uS/cm          102 event    (EL CONDB) #> 32 ELECTRICAL COND BOTTOM MICRO S, uS/cm          102 hourly   (EL CONDB) #> 33 RIVER STAGE NAVD88, FEET                       141 hourly   (RIVST88)  #>    dataCollection    dataAvailable            gage  #>    <chr>             <chr>                    <chr> #>  1 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #>  2 SATELLITE         10/01/1987 to present    MAL   #>  3 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #>  4 SATELLITE         01/25/2008 to present    MAL   #>  5 COMPUTED          10/01/1995 to 01/17/2008 MAL   #>  6 MICROWAVE         01/01/1984 to 01/17/2008 MAL   #>  7 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #>  8 SATELLITE         01/22/2008 to present    MAL   #>  9 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 10 SATELLITE         01/22/2008 to present    MAL   #> 11 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 12 SATELLITE         01/01/1995 to 10/01/2008 MAL   #> 13 DATA XCHG-USGS    07/08/2011 to present    MAL   #> 14 DATA XCHG-USGS    07/08/2011 to present    MAL   #> 15 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 16 SATELLITE         06/13/1986 to present    MAL   #> 17 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 18 SATELLITE         01/25/2008 to present    MAL   #> 19 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 20 SATELLITE         01/17/2008 to present    MAL   #> 21 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 22 SATELLITE         06/13/1986 to present    MAL   #> 23 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 24 SATELLITE         06/18/2007 to present    MAL   #> 25 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 26 SATELLITE         01/17/2008 to present    MAL   #> 27 MICROWAVE         02/01/1995 to 01/17/2008 MAL   #> 28 COMPUTED          01/18/2008 to present    MAL   #> 29 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 30 SATELLITE         01/17/2008 to present    MAL   #> 31 DATA XCHG-DWR DES 10/03/2008 to present    MAL   #> 32 SATELLITE         01/17/2008 to present    MAL   #> 33 COMPUTED          02/02/2006 to 09/30/2006 MAL #> Please provide sensor # and duration malGage <- pullCDEC(station = \"MAL\", sensor = 25, duration = \"hourly\",                      dateStart = \"06/13/1986\", dateEnd = \"06/14/1986\")  head(malGage) #>   stationId duration sensorNumber sensorType            dateTime    obsDate #> 1       MAL        H           25     TEMP W 1986-06-13 00:00:00 1986-06-13 #> 2       MAL        H           25     TEMP W 1986-06-13 01:00:00 1986-06-13 #> 3       MAL        H           25     TEMP W 1986-06-13 02:00:00 1986-06-13 #> 4       MAL        H           25     TEMP W 1986-06-13 03:00:00 1986-06-13 #> 5       MAL        H           25     TEMP W 1986-06-13 04:00:00 1986-06-13 #> 6       MAL        H           25     TEMP W 1986-06-13 05:00:00 1986-06-13 #>   value dataFlag units #> 1    NA     <NA> DEG C #> 2    NA     <NA> DEG C #> 3    NA     <NA> DEG C #> 4    NA     <NA> DEG C #> 5    NA     <NA> DEG C #> 6    NA     <NA> DEG C"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"conclusion","dir":"","previous_headings":"","what":"Conclusion","title":"Various functions for acquiring data within the SFE","text":"deltadata package aims provide workflow functions efficiently work IEP survey data. vignette, explored use package replicate portions SLS QAQC pipeline. Function bridgeAccess convenient wrapper connect Access database, allowing us pull relational tables interest. function can also access relationship schema, can used guide joining process relational tables interest via schemaJoin(). relational tables read R, can leverage R packages QAQC data. deltadata provides several niche QAQC functions: 1) plotGPS() gpsOutlier() explore outlying GPS coordinates based distance theoretical, 2) compare water quality data nearest CDEC station via popCDEC(). may additional functionalities added package future. suggestions encounter bugs, please feel free open issue, contribute package via pull request, directly contact Trinh Nguyen.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to an Access database — bridgeAccess","title":"Connect to an Access database — bridgeAccess","text":"Create connection Access database pull requested tables. function attempt account mismatched architectures (R vs Microsoft Access) take longer execute .","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to an Access database — bridgeAccess","text":"","code":"bridgeAccess(file, tables = \"check\", method = \"auto\", retry = F, ...)"},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to an Access database — bridgeAccess","text":"file File path Access database file. Can path hard drive URL. tables vector table names determine relational tables pull. can left blank provide list options. system table provided, may need provide read permission work. done Access DB . Open file, select \"Enable Content\" prompted, Ctrl + G, paste \"Immediate\" window: CurrentProject.Connection.Execute \"GRANT SELECT MSysRelationships Admin;\", run command pressing Enter exiting Access database. method method argument download.file. Defaults auto recommended change . See download.file additional details downloaded file(s) read correctly. retry Logical. TRUE, function retry extracting waiting 25 seconds. ... Additional arguments passed onto connectAccess(). Used pass specific driver default Access driver work, user name, password.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to an Access database — bridgeAccess","text":"list relational tables read Access database connection.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to an Access database — bridgeAccess","text":"","code":"if (FALSE) { # \\dontrun{ bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\")  bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\", tables = c(\"Catch\", \"FishCodes\", \"Lengths\", \"Meter Corrections\", \"SLS Stations\", \"Tow Info\", \"Water Info\")) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the closest CDEC gage — calcNearestCDEC","title":"Find the closest CDEC gage — calcNearestCDEC","text":"Identifies nearest CDEC gage lat/lon interest. function requires metadata CDEC stations interest. default, CDEC stations used.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the closest CDEC gage — calcNearestCDEC","text":"","code":"calcNearestCDEC(   df,   cdecGPS = deltadata:::cdecStations,   cdecMetadata = deltadata:::cdecMetadata,   variable = c(\"temp\", \"turbidity\", \"ec\"),   waterColumn = c(\"top\", \"bottom\") )"},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the closest CDEC gage — calcNearestCDEC","text":"df data frame contains least lat/lon station(s) interest, named lat lon. cdecGPS data frame containing GPS coordinates CDEC gages interest, lat lon. cdecMetadata data frame containing metadata table CDEC gages interest. table must match format provided DWR website. recommended use pullMetadataCDEC() get data. variable water quality variable interest. Currently supports water temperature temp, turbidity turbidity, electro-conductivity ec. defaults water temperature. waterColumn water column variable interest prioritized? Supports top bottom, defaulting top. now, top data used calculation even ask bottom data.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the closest CDEC gage — calcNearestCDEC","text":"data frame metadata closest CDEC station point interest data variable interest.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the closest CDEC gage — calcNearestCDEC","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(station = \"306\", lat = 38.00064, lon = -122.4136)  calcNearestCDEC(df) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"#' CDEC gage GPS coordinates #' #' GPS Coordinates of all available CDEC stations #' #' @format A data frame with 3 variables #'  #' station Name of the CDEC station #' latitude latitude value in degrees #' longitude longitude value in degree #'  ","title":"#' CDEC gage GPS coordinates #' #' GPS Coordinates of all available CDEC stations #' #' @format A data frame with 3 variables #'  #' station Name of the CDEC station #' latitude latitude value in degrees #' longitude longitude value in degree #'  ","text":"#' CDEC gage metadata #' #' Sensor metadata available CDEC stations #' #' @format data frame 7 variables #' sensorDescription Description sensor sensorNumber Value sensor duration Data duration flag plot Plot flag dataCollection Collection source dataAvailable Range data availability gage CDEC gage name \"CDECMetadata\" crosswalk IEP survey names","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"#' CDEC gage GPS coordinates #' #' GPS Coordinates of all available CDEC stations #' #' @format A data frame with 3 variables #'  #' station Name of the CDEC station #' latitude latitude value in degrees #' longitude longitude value in degree #'  ","text":"","code":"crosswalk"},{"path":"https://trinhxuann.github.io/deltadata/reference/crosswalk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"#' CDEC gage GPS coordinates #' #' GPS Coordinates of all available CDEC stations #' #' @format A data frame with 3 variables #'  #' station Name of the CDEC station #' latitude latitude value in degrees #' longitude longitude value in degree #'  ","text":"data frame 29 columns variableType Category variable interest variable Name used describe data collected recommendedName Value recommended IEP use describe relevant data recommendedUnit Value recommended IEP use describe unit relevant data notes Freeform comments IEP ybfmp Yolo Bypass Fish Monitoring Program YBFMP Units Units djfmp Delta Juvenile Fish Monitoring Program DJFMP Units Units frp Fish Restoration Program FRP Units Units Delta Smelt formalin preservation data familiar Delta boat electrofishing survey familiar Electrofishing Units Units EDSM Enhanced Delta Smelt Monitoring Program EDSM Units Units sls Smelt Larval Survey SLS units Units 20mm 20 mm Survey 20mm units Units stn Summer Townet Survey STN units Units fmwt Fall Midwater Trawl FMWT units Units skt Spring Kodiak Trawl SKT units Units sms Suisun Marsh Study SMS units Units bs Bay Study","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/crosswalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"#' CDEC gage GPS coordinates #' #' GPS Coordinates of all available CDEC stations #' #' @format A data frame with 3 variables #'  #' station Name of the CDEC station #' latitude latitude value in degrees #' longitude longitude value in degree #'  ","text":"Relates IEP survey names recommended names created DUWG","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"function attempts convert latitude longitude coordinates decimal degrees. supports two formats: degrees minutes seconds (DMS) degrees decimal minutes (DDS).","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"","code":"decimalDegrees(x, type = c(\"dms\", \"ddm\"), isLongitude = FALSE)"},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"x value vector latitude longitude dms ddm format separated whitespace type Either \"dms\" \"ddm\". lat/lon format input. isLongitude T/F. expect first set number 3 digits. assign value negative specific Bay-Delta area.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"numeric vector decimal degrees","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"","code":"gpsDF <- data.frame( Latitude = paste(c(rep(38, 7)), c(2, 3, 3, 4, 4, 3, 5), c(34.4, 37.1, 49, 35, 16, 39.9, 57.2)), Longitude = paste(c(rep(122, 7)), c(2, 3, 3, 4, 4, 3, 5), c(34.4, 37.1, 49, 35, 16, 39.9, 57.2)) )  decimalDegrees(gpsDF$Latitude, type = \"dms\") #> [1] 38.04289 38.06031 38.06361 38.07639 38.07111 38.06108 38.09922 decimalDegrees(gpsDF$Longitude, type = \"ddm\", isLongitude = TRUE) #> [1] -122.0391 -122.0562 -122.0582 -122.0725 -122.0693 -122.0567 -122.0929"},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull files from an EDI package — getEDI","title":"Pull files from an EDI package — getEDI","text":"function works API provided EDI download files package. default behavior download newest version data package, can changed via version argument. function handles different file types differently, .e., .csv files read directly R file types downloaded temporary folder file path file returned. Bear mind EDI servers slow execution code thus affected.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull files from an EDI package — getEDI","text":"","code":"getEDI(url, files, version = \"newest\")"},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull files from an EDI package — getEDI","text":"url URL EDI package version number, .e., package URL access browser. files Vector file names interest. match exactly website. Leave blank see options. version Version interest package hand. Defaults newest, pulls data newest version.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull files from an EDI package — getEDI","text":"list data files requested. CSV, read directly R via read.csv() function. file types, file downloaded file path provided output element.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull files from an EDI package — getEDI","text":"","code":"if (FALSE) { # \\dontrun{ getEDI(\"https://portal.edirepository.org/nis/mapbrowse?packageid=edi.534.8\", files = c(\"Catch.csv\", \"SLSTables.rds\", \"SLS_Metadata.pdf\")) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":null,"dir":"Reference","previous_headings":"","what":"Get full taxonomic information from ITIS — getTaxonomyFromItis","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"Get full taxonomic information ITIS","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"","code":"getTaxonomyFromItis(taxonNames, verbose = TRUE)"},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"taxonNames vector species names Taxonomic Species Number (TSN). Supports different ranks input. See details. verbose Logical. Defaults TRUE. progress notifications printed console?","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"data frame","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"taxonomic rank information inputted value provided, e.g., provide value phylum level, kingdom-associated levels returned. Additionally, may different TSNs associated input value, one valid . returned. Users take care check 'validity' column additional filtering criteria.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"","code":"if (FALSE) { # \\dontrun{ taxa <- c(\"Chinese Mitten Crab\", \"Liparis\", \"Oncorhynchus tshawytscha\")  getTaxonomyFromItis(taxa) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Isolate outlying stations — gpsOutlier","title":"Isolate outlying stations — gpsOutlier","text":"Identify stations d distance miles, defaulting 0.5, away theoretical coordinate.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isolate outlying stations — gpsOutlier","text":"","code":"gpsOutlier(df, d = 0.5, returnAll = F)"},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isolate outlying stations — gpsOutlier","text":"df dataframe 6 required columns: date, station, legend, layer, lat, lon. See plotGPS details. d Miles threshold call coordinate outlying. distance measured crow flies. returnAll Logical, return rows . Defaults F, returning outlying points","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isolate outlying stations — gpsOutlier","text":"data frame outlying coordinates.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isolate outlying stations — gpsOutlier","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(date = 2023, station = c(508, 513, 520, 801, 801), legend = c(rep(\"Theoretical\", 4), \"StartTow\"), layer = c(rep(\"Theoretical\", 4), \"13\"), lat = c(38.04717, 38.05886, 38.03217, 38.04369, 38.05500), lon = c(-121.9172, -121.8677, -121.8631, -121.8440, -121.8487))  gpsOutlier(df, d = 0.5) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/meterSchedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Meter schedules of IEP surveys — meterSchedule","title":"Meter schedules of IEP surveys — meterSchedule","text":"Data frame outlining acceptable flowmeter range per tow duration","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/meterSchedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meter schedules of IEP surveys — meterSchedule","text":"","code":"meterSchedule"},{"path":"https://trinhxuann.github.io/deltadata/reference/meterSchedule.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Meter schedules of IEP surveys — meterSchedule","text":"list data frames survey. data frame 4 columns duration Tow duration meterMin Minimum acceptable value meterMax Maximum acceptable value gear Gear type, leave NA none","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot station GPS coordinates with layer control. — plotGPS","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"leaflet wrapper. input data frame requires specific columns must included. format caters IEP surveys generalizable datasets.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"","code":"plotGPS(df, layerName = \"Layer\", dateName = \"Date\", height = 1200, ...)"},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"df dataframe 6 required columns: date, station, legend, layer, lat, lon. See \"details\" section additional information. layerName Character vector used label layer element within pop plotted point. dateName Character vector used label date element within pop plotted point. height Height leaflet map. ... Optional. Currently used determine provider argument within addProviderTiles.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"leaflet plot.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"input data frame must least six specific columns. date represents samples taken used label data point pop-label. technically need date can date-related label makes sense project, e.g., month year. station represents name sampling points used label data point map. legend contains legend labels marks colors data points map. useful different instances sampling point, e.g., start end GPS coordinates. layer determines layers depicted layer control plot. Use filter data points map, e.g., per survey number. lat contains latitude coordinates sampling point lon contains longitude coordinates sampling point","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(date = 2023, station = c(508, 513, 520, 801), legend = c(\"Theoretical\"), layer = c(\"Theoretical\"), lat = c(38.04717, 38.05886, 38.03217, 38.04369), lon = c(-121.9172, -121.8677, -121.8631, -121.8440))  plotGPS(df, layerName = \"Survey\", dateName = \"Year\") } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate the closest CDEC station data. — popCDEC","title":"Populate the closest CDEC station data. — popCDEC","text":"function search closest CDEC station point within data frame retrieve water tempearture, turbidity, electroconductivity data closest time point sampling time point interest. CDEC gage data interest, either terms sensor interest time point interest, NA value next closest time point station provided, available.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate the closest CDEC station data. — popCDEC","text":"","code":"popCDEC(   df,   cdecClosest = NULL,   variable = c(\"temp\", \"turbidity\", \"ec\"),   waterColumn = c(\"top\", \"bottom\") )"},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate the closest CDEC station data. — popCDEC","text":"df data frame station name (station), latitude (lat), longitude (lon), time (time). Ensure time date-time format, YYYY-MM-DD HH:MM:SS. cdecClosest list closest stations per coordinate interest. provided, calcNearestCDEC() used provided df. variable water quality variable . Supports water temperature (temp), turbidity (turbidity), electroconductivity (ec). default temp. waterColumn water column look sensor data, top (top) bottom (bottom)? default top","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate the closest CDEC station data. — popCDEC","text":"data frame water quality interest closest CDEC gage closest time stamp.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate the closest CDEC station data. — popCDEC","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(station = \"306\", lat = 38.00064, lon = -122.4136, time = \"2023-01-01 10:00:00\", temp = 10)  popCDEC(df) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Pulling CDEC gage data — pullCDEC","title":"Pulling CDEC gage data — pullCDEC","text":"function first pull metadata CDEC gage. allows function direct user accordingly various arguments missing. arguments provided, query created data downloaded.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pulling CDEC gage data — pullCDEC","text":"","code":"pullCDEC(   station,   sensor = NULL,   duration = c(\"event\", \"hourly\", \"daily\"),   dateStart,   dateEnd = NULL,   temperatureUnits = c(\"C\", \"F\"),   coordinates,   verbose = T )"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pulling CDEC gage data — pullCDEC","text":"station character vector station names. Can multiple stations. sensor singular sensor value interest. duration duration data, can event, hourly, daily depends data availability gage interest. dateStart Beginning date period interest. dateEnd Ending date period interest. default today left NULL temperatureUnits Either C F convert temperature. applicable temperature data. coordinates vector length = 2 containing lat lon, order. argument can used instead station. See 'Details' additional comments. verbose Logical. function guide user argument selection arguments missing? also prints link function download . Defaults TRUE.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pulling CDEC gage data — pullCDEC","text":"data frame requested data pull.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pulling CDEC gage data — pullCDEC","text":"coordinates argument can used place station argument. calcNearestCDEC function used calculate nearest CDEC station point interest pull data gage. use function specifically interested metadata nearest CDEC gage.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pulling CDEC gage data — pullCDEC","text":"","code":"if (FALSE) { # \\dontrun{ pullCDEC(\"MAL\") pullCDEC(coordinates = c(38.04281, -121.9201)) pullCDEC(\"MAL\", 25, \"hourly\", \"06/13/1986\", \"06/14/1986\") # If coordinates are used instead, must specify the argument names. pullCDEC(coordinates = c(38.04281, -121.9201), sensor = 25, duration = \"hourly\", dateStart = \"06/13/1986\", dateEnd = \"06/14/1986\") } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull CDEC gage lat/lon — pullCoordinates","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"Pull CDEC gage lat/lon","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"","code":"pullCoordinates(gage)"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"gage Name gage interest, character.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"data frame containing station name, lat, lon.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"","code":"if (FALSE) { # \\dontrun{ pullCoordinates(\"MAL\") } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Pulling CDEC gage metadata — pullMetadataCDEC","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"function pull metadata table associated CDEC gage.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"","code":"pullMetadataCDEC(station, list = T)"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"station character vector supports one CDEC gage. list Logical, output provided list data.frame?","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"list data frame metadata associated requested CDEC gage.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"","code":"if (FALSE) { # \\dontrun{ pullMetadataCDEC(\"MAL\") } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape water year type data from DWR — pullWyt","title":"Scrape water year type data from DWR — pullWyt","text":"Scrape water year type data DWR","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape water year type data from DWR — pullWyt","text":"","code":"pullWyt(url = \"https://cdec.water.ca.gov/reportapp/javareports?name=WSIHIST\")"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrape water year type data from DWR — pullWyt","text":"url URL historical Water Supply Index (WSIHIST) website","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape water year type data from DWR — pullWyt","text":"Returns list three tables, reconstructed wyt, eight river runoff, official wyt classification. reconstructedWyt information Sacramento San Joaquin Valleys water year type indices table eightRiver information Eight River Runoff table officialWyt Contains wyt index classification Sacramento San Joaquin River Valleys","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scrape water year type data from DWR — pullWyt","text":"","code":"if (FALSE) { # \\dontrun{ pullWyt() } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply basic QAQC procedures to a survey dataset — qaqcData","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"Apply basic QAQC procedures survey dataset","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"","code":"qaqcData(   data,   year,   survey = c(\"ybfmp\", \"djfmp\", \"frp\", \"edsm\", \"sls\", \"20mm\", \"stn\", \"fmwt\", \"skt\", \"sms\"),   convertNames = F,   officialGPS = NULL,   gpsDistance = 0.5,   startingGPSFormat = c(\"dms\", \"ddm\"),   towSchedule = NULL,   meterSchedule = NULL,   waterQualityVariables = c(\"BottomDepth\", \"WaterTemperature\", \"WaterTemperatureTop\",     \"WaterTemperatureBottom\", \"SpecificConductance\", \"SpecificConductanceTop\",     \"SpecificConductanceBottom\", \"Secchi\", \"TurbidityNTU\", \"TurbidityTopNTU\",     \"TurbidityBottomNTU\", \"Salinity\", \"SalinityTop\", \"SalinityBottom\"),   stdev = 2,   waterQualityGroupings = list(\"StationCode\", c(\"StationCode\", \"Month\")) )"},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"data data frame required data, dependent QAQC procedures want run. advised provide fully joined/merged dataset. year filtering year. can support custom year labels desired, e.g., sampling season extends across two years. survey Name qualifying IEP survey name. Currently explicit support sls, 20mm, stn, fmwt, bs. convertNames T/F. names changed respective IEP recommended names officialGPS Calculate outlying gps points provided, defaulting NULL. data frame containing official GPS coordinates sampling stations. Required least three columns: station, lat, lon. Coordinates provided degree decimals. gpsDistance value miles indicating threshold distance beyond outlier. Defaults 0.5 miles startingGPSFormat Either degrees, minutes, seconds (dms) degrees decimal minutes (ddm). Format GPS coordinates. convert decimal degrees towSchedule Calculate outlying cable length values provided. data frame containing tow schedule. Several tow schedules provided package within towSchedule list. See details. meterSchedule Calculate outlying flow meter readings provided. data frame containing expected range meter reading based duration tow. Several meter schedules provided package within meterSchedule list. can provide data frame following format. waterQualityVariables Calculate outlying water quality variables. stdev Defaults 2. number standard deviation away mean flag outlying water quality value waterQualityGroupings list grouping variables iterate water quality check. default, calculates per station per station month.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"list objects containing identified outliers rows missing data points","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"towSchedule meterSchedule arguments, can use schedules recorded package (towSchedule meterSchedule), currently available center surveys, based protocol documentation. available, can provide schedule. See example create table.","code":""},{"path":[]},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"Save data tables pulled Access database .csv files","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"","code":"saveRelationalTables(relationalTables, folderPath, fileNames = NULL)"},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"relationalTables list relational tables, ideally taken bridgeAccess. folderPath Path folder csv files saved. fileNames vector file names (file path). NULL, pull names provided relationalTables argument. Defaults NULL","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"table written. metadata table returned indicating success file writes.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"simple wrapper function save relational tables pulled Access database. function developed specifically surveys within Native Fish Program CDFW, requiring UTF-8 encoding.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"","code":"if (FALSE) { # \\dontrun{ slsTables <- bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\", tables = c(\"Catch\", \"FishCodes\"))  # Saving to the temporary directory saveRelationalTables(slsTables, folderPath = tempdir()) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies the joins in accordance to a relationship schema. — schemaJoin","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"function pulls system table within Access database dictates join order types. attempt apply joining rules provided tables. Users can specify tables like join tables provide function. Ensure names tables provided matches required relationship table.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"","code":"schemaJoin(schema, data)"},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"schema schema table mirrors structure Access schema. data list data tables joined","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"data frame joined according relationship schema.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"join type relationship table Access can modified directly required. Simply add joinType column relationship table specify one four options: full_join, inner_join, left_join, right_join. data argument can theoretically take data frame. allows manipulations relational tables operations necessary joining. Within schema table , szReferencedObject refers relational table primary key, szObject refers relational table foreign key.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"tables 20mm dataset sequentially linked. tables linked together first linked back original. solve ?","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"","code":"if (FALSE) { # \\dontrun{ slsTables <- bridgeAccess( \"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\", tables = c(\"Catch\", \"FishCodes\", \"Lengths\", \"Meter Corrections\", \"SLS Stations\", \"Tow Info\", \"Water Info\") )  schema <- bridgeAccess( \"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\", tables = c(\"MSysRelationships\"))[[1]]  schemaJoin(schema, slsTables) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/scrapeForm.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","title":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","text":"function allows users submit form query return resulting session. field arguments specified, function return available fields options users select. function created SacPas webpages mind theoretically work webpage static form interface.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/scrapeForm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","text":"","code":"scrapeForm(url, formIndex = NULL, ..., returnForm = F)"},{"path":"https://trinhxuann.github.io/deltadata/reference/scrapeForm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","text":"url URL containing form(s) interest formIndex argument required 1 form webpage. numeric index indicating form interest ... Field names appropriate options submit query. Can left empty get back list available fields options. Fields allowing multiple selections provided vector. returnForm Logical, return html form TRUE","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/scrapeForm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","text":"rvest_session","code":""},{"path":[]},{"path":"https://trinhxuann.github.io/deltadata/reference/towSchedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Tow schedules of IEP surveys — towSchedule","title":"Tow schedules of IEP surveys — towSchedule","text":"Replicated tow schedules IEP surveys","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/towSchedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tow schedules of IEP surveys — towSchedule","text":"","code":"towSchedule"},{"path":"https://trinhxuann.github.io/deltadata/reference/towSchedule.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tow schedules of IEP surveys — towSchedule","text":"list data frames survey. data frame 4 columns duration Tow duration maxDepth Maximum depth recorded sampling location depth Depth range label created cut() function cableLength Length cable let ","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Water year type of a date — wytDate","title":"Water year type of a date — wytDate","text":"Water year type date","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Water year type of a date — wytDate","text":"","code":"wytDate(date, wyt, valley = c(\"sac\", \"sjr\"), value = c(\"wyt\", \"index\"))"},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Water year type of a date — wytDate","text":"date single vector dates, date format wyt data frame official wyt pullWyt function valley system, either \"sac\" \"sjr\" value value return, either \"wyt\" \"index\"","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Water year type of a date — wytDate","text":"Returns water year type index classification associated date(s)","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Water year type of a date — wytDate","text":"","code":"if (FALSE) { # \\dontrun{ wytTable <- pullWyt() randomDates <- sample(0:5000, 100, replace = TRUE) + as.Date(\"2010-01-01\") wytDate(randomDates, wyt = wytTable$officialWyt) } # }"}]
