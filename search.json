[{"path":"https://trinhxuann.github.io/deltadata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 deltadata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://trinhxuann.github.io/deltadata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Trinh Nguyen. Author, maintainer.","code":""},{"path":"https://trinhxuann.github.io/deltadata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nguyen T (2024). deltadata: Various functions acquiring data within SFE. R package version 0.0.0.9000, https://trinhxuann.github.io/deltadata/.","code":"@Manual{,   title = {deltadata: Various functions for acquiring data within the SFE},   author = {Trinh Nguyen},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://trinhxuann.github.io/deltadata/}, }"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"installing-the-package","dir":"","previous_headings":"","what":"Installing the package","title":"Various functions for acquiring data within the SFE","text":"deltadata package can installed GitHub repository.","code":"# Install `devtools` if we need to install.packages(\"devtools\")  # Installing `deltadata` if we do not already have it devtools::install_github(\"trinhxuann/deltadata\")"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"reading-in-your-data","dir":"","previous_headings":"","what":"Reading in your data","title":"Various functions for acquiring data within the SFE","text":"bridgeAccess() function primary tool download, connect , extract data tables Access database. However, prerequisite must fulfill.","code":""},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"prerequisite-to-enable-bridgeaccess","dir":"","previous_headings":"Reading in your data","what":"Prerequisite to enable bridgeAccess()","title":"Various functions for acquiring data within the SFE","text":"function requires architectures R Microsoft Access , .e., 32 vs 64-bit. help users, function automatically checks requirement proceeding. state computers, 32-bit Microsoft Access installed. Unfortunately, newest versions R come 64-bit. Therefore, two potential solutions: Install 32-bit R. latest version R supports 32-bit version 4.1.3. installed, bridgeAccess() run instance background, allowing stay working 64-bit R. Install 64-bit Office. likely requires installation department. solution future proof require separate install R. can replicate architecture check using internal function package: function determines architectures align, 64-bit R 32 bit Office. function attempt find use 32-bit R proceed.","code":"# This function is ran internally in bridgeAccess() deltadata:::architectureCheck() #> $check #> [1] FALSE #>  #> $rBit #> [1] \"x64\" #>  #> $officeBit #> [1] \"x32\""},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"connecting-to-your-access-database","dir":"","previous_headings":"Reading in your data","what":"Connecting to your Access database","title":"Various functions for acquiring data within the SFE","text":"first argument bridgeAccess() path file. argument flexible can take filepath file hard drive URL file online. file must Access database compressed file (e.g., .zip) Access database inside. Access database needs downloaded URL extracted compressed file, file downloaded Window’s temporary folder (deleted R shut ). download 20 mm FTP website, opting .zip version. function download file, extract , provide us list table names choose . rerun function file already downloaded, function skip downloading file .","code":"bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/20mm_New.zip\") #> Extracting file: '20mm_New.accdb' from the zip file."},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"extracting-your-tables-of-interest","dir":"","previous_headings":"Reading in your data","what":"Extracting your tables of interest","title":"Various functions for acquiring data within the SFE","text":"connected Access database, table argument allows specify tables like read R. know, leave argument blank function return names available data tables specify (shown ). specified, tables read R list format. 20 mm five main relational tables needed QAQC. can specify : can also download system relationship table. important table records relationships relational tables database. can leverage table automatically reliably join relational tables one another. However, table require special permissions download. can give permissions feeding table (MSysRelationships) bridgeAccess(). function open Access file provide message instructions:","code":"relationalTables <- bridgeAccess(file = \"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/20mm_New.zip\",                           tables = c(\"Station\", \"Survey\", \"Tow\", \"Gear\", \"20mmStations\")) \"Enable content, `Ctrl + g`, paste in: `CurrentProject.Connection.Execute \"GRANT SELECT ON MSysRelationships TO Admin;\"` hit `Enter`, exit file, and rerun this code.\" schema <- bridgeAccess(   \"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/20mm_New.zip\",   tables = c(\"MSysRelationships\"), retry = T   )  # The function outputs a list, of which we can index to grab just the table schema <- schema[[1]]"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"data-joining","dir":"","previous_headings":"","what":"Data joining","title":"Various functions for acquiring data within the SFE","text":"relational tables must joined together can properly QAQC data. , can use schemaJoin() function decipher relationship table. Although can join tables hand, schemaJoin() function provide automatic consistent way join tables correctly. Throughout joining process, function provides narration join type, tables joined, column keys join occurring . can use narration ensure getting joins expecting. relational tables joined, can proceed quality assurance quality control (QAQC) dataset.","code":"joinedData <- schemaJoin(schema, relationalTables) #> inner_join 'Survey' with 'Station' via columns 'SurveyID' and 'SurveyID'  #> inner_join 'Station' with 'Tow' via columns 'StationID' and 'StationID'  #> inner_join 'Tow' with 'Gear' via columns 'TowID' and 'TowID'"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"data-qaqc","dir":"","previous_headings":"","what":"Data QAQC","title":"Various functions for acquiring data within the SFE","text":"package supports various QAQC operations duplicated requested CDFW IEP surveys. Ideally, operations incorporated surveys part larger effort create robust standardized QAQC workflow IEP surveys can leverage.","code":""},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"checking-outlying-gps-coordinates","dir":"","previous_headings":"Data QAQC","what":"Checking outlying GPS coordinates","title":"Various functions for acquiring data within the SFE","text":"two functions dedicated visualizing detecting GPS coordinates far desired sampling location: plotGPS(): plots GPS coordinates leaflet map. Requires data frame 6 columns, date, station, legend, layer, lat, lon. legend column contain legend labels plotted points, recommended one group “Theoretical” coordinates sampling station. layer column used layer control (toggling display layer) generally survey number. See ?plotGPS() information. gpsOutlier(): returns data frame GPS coordinates beyond specified distance (default 0.5 mile, measured “--crow-flies”, direct path) theoretical. function requires 6 columns plotGPS() firm requirement Theoretical (named ) group GPS coordinates legend column. , explore 20 mm 2023 sampling season outlying sampling points. first manipulate joined data frame use plotGPS().  interactive (disabled README) plot allows us visualize sampling points interest . helpful identifying significantly outlying points, e.g., outside Delta. can click point interest pop-appear layer (, survey number) sampling date information. Although step useful quick glance points, can specific search potentially outlying points using gpsOutlier() feeding points plotGPS().  creates map outlying data points. resulting data frame contains distance theoretical sampling point, case distance strict threshold.","code":"filteredData <- joinedData  # Filter for 2023 season filteredData$SeasonYear <- as.numeric(format(filteredData$SampleDate, format = \"%Y\")) +   (as.numeric(format(filteredData$SampleDate, format = \"%m\")) > 11) filteredData <- subset(filteredData, SeasonYear == 2023)  # Add in lat and lon of the sampling locations filteredData <- transform(filteredData,                           startLatitude = decimalDegrees(paste(StartLatDeg, StartLatMin, StartLatSec), \"dms\"),                           startLongitude = decimalDegrees(paste(StartLonDeg, StartLonMin, StartLonSec), \"dms\", isLongitude = T),                           endLatitude = decimalDegrees(paste(EndLatDeg, EndLatMin, EndLatSec), \"dms\"),                           endLongitude = decimalDegrees(paste(EndLonDeg, EndLonMin, EndLonSec), \"dms\", isLongitude = T))  # Fix the table with the theoretical sampling points. Convert to lat/lon in decimal degrees officialGPS <- data.frame(   station = relationalTables$`20mmStations`$Station,   lat = decimalDegrees(paste(     relationalTables$`20mmStations`$LatD,     relationalTables$`20mmStations`$LatM,     relationalTables$`20mmStations`$LatS   ), type = \"dms\"),   lon = decimalDegrees(paste(     relationalTables$`20mmStations`$LonD,     relationalTables$`20mmStations`$LonM,     relationalTables$`20mmStations`$LonS   ), type = \"dms\", isLongitude = T),   date = NA,   legend = \"Theoretical\",   layer = \"Theoretical\" )  # Stack to long format gpsDF <- data.frame(   # R recycles rows as long as the vectors are multiples of each other   date = filteredData$SampleDate,   station = filteredData$Station,   legend = rep(c(\"start\", \"end\"), each = nrow(filteredData)),   layer = filteredData$Survey,   lat = c(filteredData$startLatitude, filteredData$end_latitude),   lon = c(filteredData$startLongitude, filteredData$endLongitude) ) # Removing duplicates, e.g., multiple fish catches per tow gpsDF <- unique(gpsDF)  # Add in the theoretical as a legend gpsDF <- rbind(   gpsDF,   officialGPS )  # Plot it plotGPS(gpsDF, layerName = \"Survey\", dateName = \"Sampling Date\", height = 500) # By default, d = 0.5 gpsOutliers <- gpsOutlier(gpsDF) plotGPS(gpsOutliers, height = 500) head(gpsOutliers) #>            date station legend layer      lat       lon lonTheoretical #> 2970 2023-03-28     323    end     2 38.04039 -122.3035      -122.2863 #> 2894 2023-03-30     338    end     2 38.05886 -122.2320      -122.2489 #> 1153 2023-05-09     405  start     5 38.03381 -122.1600      -122.1467 #> 3955 2023-06-07     322    end     7 38.01992 -122.3362      -122.3508 #> 3236 2023-05-09     405    end     5 38.03381 -122.1587      -122.1467 #> 811  2023-03-30     338  start     2 38.05886 -122.2356      -122.2489 #>      latTheoretical  distance outlier #> 2970       38.04289 0.9521133    TRUE #> 2894       38.06003 0.9260127    TRUE #> 1153       38.03992 0.8366965    TRUE #> 3955       38.02364 0.8346230    TRUE #> 3236       38.03992 0.7760053    TRUE #> 811        38.06003 0.7330460    TRUE"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"comparing-water-quality-values-to-cdec-gages","dir":"","previous_headings":"Data QAQC","what":"Comparing water quality values to CDEC gages","title":"Various functions for acquiring data within the SFE","text":"Many IEP surveys collect water quality data addition fish data. One way QAQC water quality data compare nearby continuous sondes. can popCDEC() function. function fetch surface (default) bottom water temperature, turbidity, electro-conductivity data nearest CDEC (California Data Exchange Center) sondes. Like gps functions, popCDEC() requires several five columns: “time”, “station”, “lat”, “lon”, variable interest (“temp”, “turbidity”, “ec”). function returns desired water quality data nearest CDEC station sampling point, terms space (--crow-flies) time (closest non-NA value returned). function also reports back various metadata: nearest CDEC station (cdecStation), time difference minutes sample interest CDEC sample (timeDifference), distance miles sampling point CDEC station (distance), metadata information CDEC station (sensorNumber, sensorDescription, units, duration, dataAvailable).","code":"# For the 20 mm, water quality is taken at the beginning of the first tow (out of 3) temperatureData <- data.frame(   time = as.POSIXct(paste(filteredData$SampleDate,                               format(filteredData$TowTime, \"%H:%M:%S\")),                         format = \"%Y-%m-%d %H:%M:%S\",                         tz = \"America/Los_Angeles\"),   station = filteredData$Station,   lat = filteredData$startLatitude,   lon = filteredData$startLongitude,   temp = filteredData$Temp ) # Remove duplicates temperatureData <- temperatureData[!duplicated(temperatureData[, c(\"station\", \"lat\", \"lon\", \"temp\")]), ] # Remove NAs temperatureData <- na.omit(temperatureData)  # Now, we can populate the data frame with the required data. Depending on how large our data frame is, this can take several minutes. temperatureOutlierCdec <- popCDEC(temperatureData, variable = \"temp\") #> Reading from: https://cdec.water.ca.gov/dynamicapp/req/CSVDataServlet?Stations=OSJ,BIR,FCT,BET,HOL,PRI,TRN,RRI,BAC,LPS,DWS,LIB,TOE,HWB,TMS,MIR,UCS,C24,PCT,C31,PTS,ANH,BDL,NSL,VOL,GZL,OH4,FRK,TWI,SOI,HON,MAL,FLT,SJJ,MRZ,MOK,WCI,BLL,IBS,M13&SensorNums=25&dur_code=E&Start=2023-03-13&End=2023-07-08  #> Reading from: https://cdec.water.ca.gov/dynamicapp/req/CSVDataServlet?Stations=JER,STI,BKS,EMM,ANC,CPP,CLL&SensorNums=25&dur_code=H&Start=2023-03-13&End=2023-07-06  head(temperatureOutlierCdec) #>                    time station      lat       lon temp cdecStation tempCDEC #> 24  2023-03-15 09:34:00     815 38.08392 -121.5714 11.0         OSJ 11.50000 #> 9   2023-03-13 13:05:00     914 37.97153 -121.5209 12.1         BIR 11.77778 #> 420 2023-03-13 08:45:00     809 38.05289 -121.6926 10.5         JER 10.55556 #> 26  2023-03-15 10:30:00     812 38.09003 -121.6395 11.0         FCT 11.22222 #> 2   2023-03-13 09:43:00     901 38.04700 -121.6198 11.1         BET 11.55556 #> 4   2023-03-13 10:35:00     902 38.02303 -121.5831 11.7         HOL 11.61111 #>     timeDifference  distance sensorNumber         sensorDescription units #> 24               4 0.9729511           25 TEMPERATURE, WATER, DEG F DEG C #> 9                5 2.0880878           25 TEMPERATURE, WATER, DEG F DEG C #> 420             15 0.2063425           25 TEMPERATURE, WATER, DEG F DEG C #> 26               0 1.6144262           25 TEMPERATURE, WATER, DEG F DEG C #> 2                2 0.7900384           25 TEMPERATURE, WATER, DEG F DEG C #> 4                5 0.4620903           25 TEMPERATURE, WATER, DEG F DEG C #>     duration         dataAvailable #> 24     event 05/19/2006 to present #> 9      event 03/02/2018 to present #> 420   hourly 02/25/1999 to present #> 26     event 04/20/2015 to present #> 2      event 03/29/2006 to present #> 4      event 06/26/2006 to present"},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"all-in-one-function","dir":"","previous_headings":"Data QAQC","what":"All-in-one function","title":"Various functions for acquiring data within the SFE","text":"qaqcData() function attempts apply various QAQC operations IEP dataset, one simple function call. function runs several QAQC operations inputted data set: outlying GPS points, defaulting 0.5 mile away theoretical, inconsistent cable lengths expected based sampling depth, outlying flow meter readings based sampling duration, outlying water quality values (water temperature, Secchi, turbidity, electro-conductivity, salinity) two standard deviations beyond mean (per station per station per month), missing data points previously mentioned operations. operation optional ran supporting argument provided: gps outliers requires table theoretical gps coordinates station, provided officialGPS argument, cable length outliers require tow schedule, provided towSchedule argument, flow meter reading outliers require table expected ranges, provided meterSchedule argument, outlying water quality values require column exist inputted data frame. package currently store tow meter schedules various CDFW IEP surveys ease use, deltadata::towSchedule deltadata::meterSchedule. surveys added package information becomes available. Users can specify schedules modeling existing ones. can demonstrate function 20 mm database: function returns results part list, separating outlying NA data points data frames. Although function automatically populate CDEC data water quality variables, users can manipulate outputted outlier data frames accepted popCDEC():","code":"# Create the tow schedule for the 20 mm. This is also available in the package as towSchedule$ttmm towSchedule <- data.frame(   duration = c(2.5, 5, 10)[1:7],   maxDepth = c(10, 13, 17, 21, 26, 32, Inf),   depth = cut(c(10, 13, 17, 21, 26, 32, Inf),               breaks = c(0, 10, 13, 17, 21, 26, 32, Inf),               right = T, include.lowest = T),   cableLength = c(75, 100, 125, 150, 175, 200, 225) )  # Create the meter schedule for the 20 mm. This is also available in the package as meterSchedule$ttmm meterSchedule <- data.frame(   duration = c(2.5, 5, 10, 5, 10),   meterMin = c(NA, 5000, 10000, 2500, 5000),   meterMax = c(NA, 15000, 30000, 15000, 25000),   gear = c(NA, 2, 2, 1, 1) )  # The function requires a joined database. We did this earlier using schemaJoin() # We also must specify a year and survey that is being inputted. ttmmQAQC <- qaqcData(data = joinedData, year = 2023, survey = \"20mm\",                      officialGPS = officialGPS, gpsDistance = 0.5, startingGPSFormat = \"dms\", # officialGPS was defined previously                      towSchedule = towSchedule,                      meterSchedule = meterSchedule) names(ttmmQAQC) #> [1] \"gpsPlot\"            \"outlierGPS\"         \"outlierCableLength\" #> [4] \"outlierMeterCount\"  \"outlierDuration\"    \"waterQuality\"       #> [7] \"missingData\"  # Outlying water temperature data, per station per month, for 2023 temperatureOutliers <- ttmmQAQC$waterQuality$StationCode_Month$WaterTemperatureTop head(temperatureOutliers) #>     Station Month SampleDate Survey             TowTime Temp     mean        sd #> 130     323     3 2023-03-28      2 1899-12-30 16:20:00  9.0 12.95152 1.4878930 #> 131     323     3 2023-03-28      2 1899-12-30 16:35:00  9.0 12.95152 1.4878930 #> 132     323     3 2023-03-28      2 1899-12-30 16:00:00  9.0 12.95152 1.4878930 #> 285     336     5 2023-05-09      5 1899-12-30 08:13:00 15.1 17.04615 0.8875201 #> 287     336     5 2023-05-09      5 1899-12-30 08:40:00 15.1 17.04615 0.8875201 #> 288     336     5 2023-05-09      5 1899-12-30 08:27:00 15.1 17.04615 0.8875201 #>     thresholdValueMin thresholdValueMax outlier Comments.x Comments.y Comments #> 130          9.975729          15.92730    TRUE       <NA>   YSI lost     <NA> #> 131          9.975729          15.92730    TRUE       <NA>   YSI lost     <NA> #> 132          9.975729          15.92730    TRUE       <NA>   YSI lost     <NA> #> 285         15.271113          18.82119    TRUE       <NA>       <NA>     <NA> #> 287         15.271113          18.82119    TRUE       <NA>       <NA>     <NA> #> 288         15.271113          18.82119    TRUE       <NA>       <NA>     <NA> # The function needs at least five columns: \"station\", \"lat\", \"lon\", \"time\", and our variable, \"temp\" # We already have station. We need to create the time column from the date and tow time columns  temperatureOutliers <- data.frame(   station = temperatureOutliers$Station,   time = as.POSIXct(paste(     temperatureOutliers$SampleDate,     format(temperatureOutliers$TowTime, format = \"%H:%M:%S\")),     format = \"%Y-%m-%d %H:%M:%S\",     tz = \"America/Los_Angeles\"   ),   temp = temperatureOutliers$Temp )  # The lat/lon columns need to be joined into the dataset using the official GPS data frame from earlier temperatureOutliers <- merge(   temperatureOutliers,   officialGPS[c(\"station\", \"lat\", \"lon\")],   by = \"station\",   all.x = T )  # We now have all required columns. head(popCDEC(temperatureOutliers, variable = \"temp\")) #> Reading from: https://cdec.water.ca.gov/dynamicapp/req/CSVDataServlet?Stations=MRZ,FLT,TMS,SOI,LIB,MIR,FCT,TRN,RRI,BIR,BAC,WCI&SensorNums=25&dur_code=E&Start=2023-03-14&End=2023-05-10  #> Reading from: https://cdec.water.ca.gov/dynamicapp/req/CSVDataServlet?Stations=CPP,EMM&SensorNums=25&dur_code=H&Start=2023-03-30&End=2023-06-09 #>    station                time temp      lat       lon cdecStation tempCDEC #> 11     323 2023-03-28 16:20:00  9.0 38.04289 -122.2863         MRZ 11.88889 #> 12     323 2023-03-28 16:35:00  9.0 38.04289 -122.2863         MRZ 11.88889 #> 10     323 2023-03-28 16:00:00  9.0 38.04289 -122.2863         MRZ 11.88889 #> 40     336 2023-05-09 08:13:00 15.1 38.06111 -122.2780         MRZ 15.44444 #> 42     336 2023-05-09 08:40:00 15.1 38.06111 -122.2780         MRZ 15.50000 #> 41     336 2023-05-09 08:27:00 15.1 38.06111 -122.2780         MRZ 15.44444 #>    timeDifference distance sensorNumber         sensorDescription units #> 11              5 8.023662           25 TEMPERATURE, WATER, DEG F DEG C #> 12              5 8.023662           25 TEMPERATURE, WATER, DEG F DEG C #> 10              0 8.023662           25 TEMPERATURE, WATER, DEG F DEG C #> 40              2 7.847695           25 TEMPERATURE, WATER, DEG F DEG C #> 42              5 7.847695           25 TEMPERATURE, WATER, DEG F DEG C #> 41              3 7.847695           25 TEMPERATURE, WATER, DEG F DEG C #>    duration         dataAvailable #> 11    event 08/21/2008 to present #> 12    event 08/21/2008 to present #> 10    event 08/21/2008 to present #> 40    event 08/21/2008 to present #> 42    event 08/21/2008 to present #> 41    event 08/21/2008 to present # We see here that EMM has a high time difference. This is because the sensor malfunctioned during the period of interest--the function returns the closest available value."},{"path":"https://trinhxuann.github.io/deltadata/index.html","id":"conclusion","dir":"","previous_headings":"","what":"Conclusion","title":"Various functions for acquiring data within the SFE","text":"deltadata package collection workflow functions meant help users efficiently work IEP datasets. vignette, explored QAQC 20 mm database using bridgeAccess(), schemaJoin(), plotGPS(), gpsOutlier(), popCDEC(), qaqcData() functions. goal package expand functions add others functions better support IEP surveys QAQC procedures. suggestions encounter bugs, please feel free open issue, contribute package via pull request, directly contact Trinh Nguyen.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to an Access database — bridgeAccess","title":"Connect to an Access database — bridgeAccess","text":"Create connection Access database pull requested tables. function attempt account mismatched architectures (R vs Microsoft Access) take longer execute .","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to an Access database — bridgeAccess","text":"","code":"bridgeAccess(file, tables = \"check\", method = \"auto\", ...)"},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to an Access database — bridgeAccess","text":"file File path Access database file. Can path hard drive URL. tables vector table names determine relational tables pull. can left blank provide list options. system table provided, may need provide read permission work. done Access DB . Open file, select \"Enable Content\" prompted, Ctrl + G, paste \"Immediate\" window: CurrentProject.Connection.Execute \"GRANT SELECT MSysRelationships Admin;\", run command pressing Enter exiting Access database. method method argument download.file. Defaults auto recommended change . See download.file additional details downloaded file(s) read correctly. ... Additional arguments passed onto connectAccess(). Used pass specific driver default Access driver work, user name, password.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to an Access database — bridgeAccess","text":"list relational tables read Access database connection.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/bridgeAccess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to an Access database — bridgeAccess","text":"","code":"if (FALSE) { # \\dontrun{ bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\")  bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\", tables = c(\"Catch\", \"FishCodes\", \"Lengths\", \"Meter Corrections\", \"SLS Stations\", \"Tow Info\", \"Water Info\")) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the closest CDEC gage — calcNearestCDEC","title":"Find the closest CDEC gage — calcNearestCDEC","text":"Identifies nearest CDEC gage lat/lon interest. function requires metadata CDEC stations interest. default, CDEC stations used.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the closest CDEC gage — calcNearestCDEC","text":"","code":"calcNearestCDEC(   df,   cdecGPS = deltadata:::cdecStations,   cdecMetadata = deltadata:::cdecMetadata,   variable = c(\"temp\", \"turbidity\", \"ec\"),   waterColumn = c(\"top\", \"bottom\") )"},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the closest CDEC gage — calcNearestCDEC","text":"df data frame contains least lat/lon station(s) interest, named lat lon. cdecGPS data frame containing GPS coordinates CDEC gages interest, lat lon. cdecMetadata data frame containing metadata table CDEC gages interest. table must match format provided DWR website. recommended use pullMetadataCDEC() get data. variable water quality variable interest. Currently supports water temperature temp, turbidity turbidity, electro-conductivity ec. defaults water temperature. waterColumn water column variable interest prioritized? Supports top bottom, defaulting top. now, top data used calculation even ask bottom data.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the closest CDEC gage — calcNearestCDEC","text":"data frame metadata closest CDEC station point interest data variable interest.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/calcNearestCDEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the closest CDEC gage — calcNearestCDEC","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(station = \"306\", lat = 38.00064, lon = -122.4136)  calcNearestCDEC(df) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"A crosswalk of IEP survey names — crosswalk","title":"A crosswalk of IEP survey names — crosswalk","text":"Relates IEP survey names recommended names created DUWG","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A crosswalk of IEP survey names — crosswalk","text":"","code":"crosswalk"},{"path":"https://trinhxuann.github.io/deltadata/reference/crosswalk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A crosswalk of IEP survey names — crosswalk","text":"data frame 29 columns variableType Category variable interest variable Name used describe data collected recommendedName Value recommended IEP use describe relevant data recommendedUnit Value recommended IEP use describe unit relevant data notes Freeform comments IEP ybfmp Yolo Bypass Fish Monitoring Program YBFMP Units Units djfmp Delta Juvenile Fish Monitoring Program DJFMP Units Units frp Fish Restoration Program FRP Units Units Delta Smelt formalin preservation data familiar Delta boat electrofishing survey familiar Electrofishing Units Units EDSM Enhanced Delta Smelt Monitoring Program EDSM Units Units sls Smelt Larval Survey SLS units Units 20mm 20 mm Survey 20mm units Units stn Summer Townet Survey STN units Units fmwt Fall Midwater Trawl FMWT units Units skt Spring Kodiak Trawl SKT units Units sms Suisun Marsh Study SMS units Units bs Bay Study","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"function attempts convert latitude longitude coordinates decimal degrees. supports two formats: degrees minutes seconds (DMS) degrees decimal minutes (DDS).","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"","code":"decimalDegrees(x, type = c(\"dms\", \"ddm\"), isLongitude = FALSE)"},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"x value vector latitude longitude dms ddm format separated whitespace type Either \"dms\" \"ddm\". lat/lon format input. isLongitude T/F. expect first set number 3 digits. assign value negative specific Bay-Delta area.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"numeric vector decimal degrees","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/decimalDegrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GPS Coordinates to Decimal Degrees — decimalDegrees","text":"","code":"gpsDF <- data.frame( Latitude = paste(c(rep(38, 7)), c(2, 3, 3, 4, 4, 3, 5), c(34.4, 37.1, 49, 35, 16, 39.9, 57.2)), Longitude = paste(c(rep(122, 7)), c(2, 3, 3, 4, 4, 3, 5), c(34.4, 37.1, 49, 35, 16, 39.9, 57.2)) )  decimalDegrees(gpsDF$Latitude, type = \"dms\") #> [1] 38.04289 38.06031 38.06361 38.07639 38.07111 38.06108 38.09922 decimalDegrees(gpsDF$Longitude, type = \"ddm\", isLongitude = TRUE) #> [1] -122.0391 -122.0562 -122.0582 -122.0725 -122.0693 -122.0567 -122.0929"},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull files from an EDI package — getEDI","title":"Pull files from an EDI package — getEDI","text":"function works API provided EDI download files package. default behavior download newest version data package, can changed via version argument. function handles different file types differently, .e., .csv files read directly R file types downloaded temporary folder file path file returned. Bear mind EDI servers slow execution code thus affected.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull files from an EDI package — getEDI","text":"","code":"getEDI(url, files, version = \"newest\")"},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull files from an EDI package — getEDI","text":"url URL EDI package version number, .e., package URL access browser. files Vector file names interest. match exactly website. Leave blank see options. version Version interest package hand. Defaults newest, pulls data newest version.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull files from an EDI package — getEDI","text":"list data files requested. CSV, read directly R via read.csv() function. file types, file downloaded file path provided output element.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getEDI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull files from an EDI package — getEDI","text":"","code":"if (FALSE) { # \\dontrun{ getEDI(\"https://portal.edirepository.org/nis/mapbrowse?packageid=edi.534.8\", files = c(\"Catch.csv\", \"SLSTables.rds\", \"SLS_Metadata.pdf\")) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":null,"dir":"Reference","previous_headings":"","what":"Get full taxonomic information from ITIS — getTaxonomyFromItis","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"Get full taxonomic information ITIS","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"","code":"getTaxonomyFromItis(taxonNames, verbose = TRUE)"},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"taxonNames vector species names Taxonomic Species Number (TSN). Supports different ranks input. See details. verbose Logical. Defaults TRUE. progress notifications printed console?","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"data frame","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"taxonomic rank information inputted value provided, e.g., provide value phylum level, kingdom-associated levels returned. Additionally, may different TSNs associated input value, one valid . returned. Users take care check 'validity' column additional filtering criteria.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/getTaxonomyFromItis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get full taxonomic information from ITIS — getTaxonomyFromItis","text":"","code":"if (FALSE) { # \\dontrun{ taxa <- c(\"Chinese Mitten Crab\", \"Liparis\", \"Oncorhynchus tshawytscha\")  getTaxonomyFromItis(taxa) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Isolate outlying stations — gpsOutlier","title":"Isolate outlying stations — gpsOutlier","text":"Identify stations d distance miles, defaulting 0.5, away theoretical coordinate.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isolate outlying stations — gpsOutlier","text":"","code":"gpsOutlier(df, d = 0.5, returnAll = F)"},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isolate outlying stations — gpsOutlier","text":"df dataframe 6 required columns: date, station, legend, layer, lat, lon. See plotGPS details. d Miles threshold call coordinate outlying. distance measured crow flies. returnAll Logical, return rows . Defaults F, returning outlying points","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isolate outlying stations — gpsOutlier","text":"data frame outlying coordinates.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/gpsOutlier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isolate outlying stations — gpsOutlier","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(date = 2023, station = c(508, 513, 520, 801, 801), legend = c(rep(\"Theoretical\", 4), \"StartTow\"), layer = c(rep(\"Theoretical\", 4), \"13\"), lat = c(38.04717, 38.05886, 38.03217, 38.04369, 38.05500), lon = c(-121.9172, -121.8677, -121.8631, -121.8440, -121.8487))  gpsOutlier(df, d = 0.5) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/meterSchedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Meter schedules of IEP surveys — meterSchedule","title":"Meter schedules of IEP surveys — meterSchedule","text":"Data frame outlining acceptable flowmeter range per tow duration","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/meterSchedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meter schedules of IEP surveys — meterSchedule","text":"","code":"meterSchedule"},{"path":"https://trinhxuann.github.io/deltadata/reference/meterSchedule.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Meter schedules of IEP surveys — meterSchedule","text":"list data frames survey. data frame 4 columns duration Tow duration meterMin Minimum acceptable value meterMax Maximum acceptable value gear Gear type, leave NA none","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot station GPS coordinates with layer control. — plotGPS","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"leaflet wrapper. input data frame requires specific columns must included. format caters IEP surveys generalizable datasets.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"","code":"plotGPS(df, layerName = \"Layer\", dateName = \"Date\", height = 1200, ...)"},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"df dataframe 6 required columns: date, station, legend, layer, lat, lon. See \"details\" section additional information. layerName Character vector used label layer element within pop plotted point. dateName Character vector used label date element within pop plotted point. height Height leaflet map. ... Optional. Currently used determine provider argument within addProviderTiles.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"leaflet plot.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"input data frame must least six specific columns. date represents samples taken used label data point pop-label. technically need date can date-related label makes sense project, e.g., month year. station represents name sampling points used label data point map. legend contains legend labels marks colors data points map. useful different instances sampling point, e.g., start end GPS coordinates. layer determines layers depicted layer control plot. Use filter data points map, e.g., per survey number. lat contains latitude coordinates sampling point lon contains longitude coordinates sampling point","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/plotGPS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot station GPS coordinates with layer control. — plotGPS","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(date = 2023, station = c(508, 513, 520, 801), legend = c(\"Theoretical\"), layer = c(\"Theoretical\"), lat = c(38.04717, 38.05886, 38.03217, 38.04369), lon = c(-121.9172, -121.8677, -121.8631, -121.8440))  plotGPS(df, layerName = \"Survey\", dateName = \"Year\") } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate the closest CDEC station data. — popCDEC","title":"Populate the closest CDEC station data. — popCDEC","text":"function search closest CDEC station point within data frame retrieve water tempearture, turbidity, electroconductivity data closest time point sampling time point interest. CDEC gage data interest, either terms sensor interest time point interest, NA value next closest time point station provided, available.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate the closest CDEC station data. — popCDEC","text":"","code":"popCDEC(   df,   cdecClosest = NULL,   variable = c(\"temp\", \"turbidity\", \"ec\"),   waterColumn = c(\"top\", \"bottom\") )"},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate the closest CDEC station data. — popCDEC","text":"df data frame station name (station), latitude (lat), longitude (lon), time (time). Ensure time date-time format, YYYY-MM-DD HH:MM:SS. cdecClosest list closest stations per coordinate interest. provided, calcNearestCDEC() used provided df. variable water quality variable . Supports water temperature (temp), turbidity (turbidity), electroconductivity (ec). default temp. waterColumn water column look sensor data, top (top) bottom (bottom)? default top","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate the closest CDEC station data. — popCDEC","text":"data frame water quality interest closest CDEC gage closest time stamp.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/popCDEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate the closest CDEC station data. — popCDEC","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(station = \"306\", lat = 38.00064, lon = -122.4136, time = \"2023-01-01 10:00:00\", temp = 10)  popCDEC(df) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Pulling CDEC gage data — pullCDEC","title":"Pulling CDEC gage data — pullCDEC","text":"function first pull metadata CDEC gage. allows function direct user accordingly various arguments missing. arguments provided, query created data downloaded.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pulling CDEC gage data — pullCDEC","text":"","code":"pullCDEC(   station,   sensor = NULL,   duration = c(\"event\", \"hourly\", \"daily\"),   dateStart,   dateEnd = NULL,   temperatureUnits = c(\"C\", \"F\"),   coordinates,   verbose = T )"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pulling CDEC gage data — pullCDEC","text":"station character vector station names. Can multiple stations. sensor singular sensor value interest. duration duration data, can event, hourly, daily depends data availability gage interest. dateStart Beginning date period interest. dateEnd Ending date period interest. default today left NULL temperatureUnits Either C F convert temperature. applicable temperature data. coordinates vector length = 2 containing lat lon, order. argument can used instead station. See 'Details' additional comments. verbose Logical. function guide user argument selection arguments missing? also prints link function download . Defaults TRUE.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pulling CDEC gage data — pullCDEC","text":"data frame requested data pull.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pulling CDEC gage data — pullCDEC","text":"coordinates argument can used place station argument. calcNearestCDEC function used calculate nearest CDEC station point interest pull data gage. use function specifically interested metadata nearest CDEC gage.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCDEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pulling CDEC gage data — pullCDEC","text":"","code":"if (FALSE) { # \\dontrun{ pullCDEC(\"MAL\") pullCDEC(coordinates = c(38.04281, -121.9201)) pullCDEC(\"MAL\", 25, \"hourly\", \"06/13/1986\", \"06/14/1986\") # If coordinates are used instead, must specify the argument names. pullCDEC(coordinates = c(38.04281, -121.9201), sensor = 25, duration = \"hourly\", dateStart = \"06/13/1986\", dateEnd = \"06/14/1986\") } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull CDEC gage lat/lon — pullCoordinates","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"Pull CDEC gage lat/lon","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"","code":"pullCoordinates(gage)"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"gage Name gage interest, character.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"data frame containing station name, lat, lon.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullCoordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull CDEC gage lat/lon — pullCoordinates","text":"","code":"if (FALSE) { # \\dontrun{ pullCoordinates(\"MAL\") } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Pulling CDEC gage metadata — pullMetadataCDEC","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"function pull metadata table associated CDEC gage.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"","code":"pullMetadataCDEC(station, list = T)"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"station character vector supports one CDEC gage. list Logical, output provided list data.frame?","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"list data frame metadata associated requested CDEC gage.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullMetadataCDEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pulling CDEC gage metadata — pullMetadataCDEC","text":"","code":"if (FALSE) { # \\dontrun{ pullMetadataCDEC(\"MAL\") } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape water year type data from DWR — pullWyt","title":"Scrape water year type data from DWR — pullWyt","text":"Scrape water year type data DWR","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape water year type data from DWR — pullWyt","text":"","code":"pullWyt(url = \"https://cdec.water.ca.gov/reportapp/javareports?name=WSIHIST\")"},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrape water year type data from DWR — pullWyt","text":"url URL historical Water Supply Index (WSIHIST) website","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape water year type data from DWR — pullWyt","text":"Returns list three tables, reconstructed wyt, eight river runoff, official wyt classification. reconstructedWyt information Sacramento San Joaquin Valleys water year type indices table eightRiver information Eight River Runoff table officialWyt Contains wyt index classification Sacramento San Joaquin River Valleys","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/pullWyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scrape water year type data from DWR — pullWyt","text":"","code":"if (FALSE) { # \\dontrun{ pullWyt() } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply basic QAQC procedures to a survey dataset — qaqcData","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"Apply basic QAQC procedures survey dataset","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"","code":"qaqcData(   data,   year,   survey = c(\"ybfmp\", \"djfmp\", \"frp\", \"edsm\", \"sls\", \"20mm\", \"stn\", \"fmwt\", \"skt\", \"sms\"),   convertNames = F,   officialGPS = NULL,   gpsDistance = 0.5,   startingGPSFormat = c(\"dms\", \"ddm\"),   towSchedule = NULL,   meterSchedule = NULL,   waterQualityVariables = c(\"BottomDepth\", \"WaterTemperature\", \"WaterTemperatureTop\",     \"WaterTemperatureBottom\", \"SpecificConductance\", \"SpecificConductanceTop\",     \"SpecificConductanceBottom\", \"Secchi\", \"TurbidityNTU\", \"TurbidityTopNTU\",     \"TurbidityBottomNTU\", \"Salinity\", \"SalinityTop\", \"SalinityBottom\"),   stdev = 2,   waterQualityGroupings = list(\"StationCode\", c(\"StationCode\", \"Month\")) )"},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"data data frame required data, dependent QAQC procedures want run. advised provide fully joined/merged dataset. year filtering year. can support custom year labels desired, e.g., sampling season extends across two years. survey Name qualifying IEP survey name. Currently explicit support sls, 20mm, stn, fmwt, bs. convertNames T/F. names changed respective IEP recommended names officialGPS Calculate outlying gps points provided, defaulting NULL. data frame containing official GPS coordinates sampling stations. Required least three columns: station, lat, lon. Coordinates provided degree decimals. gpsDistance value miles indicating threshold distance beyond outlier. Defaults 0.5 miles startingGPSFormat Either degrees, minutes, seconds (dms) degrees decimal minutes (ddm). Format GPS coordinates. convert decimal degrees towSchedule Calculate outlying cable length values provided. data frame containing tow schedule. Several tow schedules provided package within towSchedule list. See details. meterSchedule Calculate outlying flow meter readings provided. data frame containing expected range meter reading based duration tow. Several meter schedules provided package within meterSchedule list. can provide data frame following format. waterQualityVariables Calculate outlying water quality variables. stdev Defaults 2. number standard deviation away mean flag outlying water quality value waterQualityGroupings list grouping variables iterate water quality check. default, calculates per station per station month.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"list objects containing identified outliers rows missing data points","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/qaqcData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply basic QAQC procedures to a survey dataset — qaqcData","text":"towSchedule meterSchedule arguments, can use schedules recorded package (towSchedule meterSchedule), currently available center surveys, based protocol documentation. available, can provide schedule. See example create table.","code":""},{"path":[]},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"Save data tables pulled Access database .csv files","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"","code":"saveRelationalTables(relationalTables, folderPath, fileNames = NULL)"},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"relationalTables list relational tables, ideally taken bridgeAccess. folderPath Path folder csv files saved. fileNames vector file names (file path). NULL, pull names provided relationalTables argument. Defaults NULL","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"table written. metadata table returned indicating success file writes.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"simple wrapper function save relational tables pulled Access database. function developed specifically surveys within Native Fish Program CDFW, requiring UTF-8 encoding.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/saveRelationalTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the data tables pulled from an Access database as .csv files — saveRelationalTables","text":"","code":"if (FALSE) { # \\dontrun{ slsTables <- bridgeAccess(\"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\", tables = c(\"Catch\", \"FishCodes\"))  # Saving to the temporary directory saveRelationalTables(slsTables, folderPath = tempdir()) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies the joins in accordance to a relationship schema. — schemaJoin","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"function pulls system table within Access database dictates join order types. attempt apply joining rules provided tables. Users can specify tables like join tables provide function. Ensure names tables provided matches required relationship table.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"","code":"schemaJoin(schema, data)"},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"schema schema table mirrors structure Access schema. data list data tables joined","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"data frame joined according relationship schema.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"join type relationship table Access can modified directly required. Simply add joinType column relationship table specify one four options: full_join, inner_join, left_join, right_join. data argument can theoretically take data frame. allows manipulations relational tables operations necessary joining. Within schema table , szReferencedObject refers relational table primary key, szObject refers relational table foreign key.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"tables 20mm dataset sequentially linked. tables linked together first linked back original. solve ?","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/schemaJoin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies the joins in accordance to a relationship schema. — schemaJoin","text":"","code":"if (FALSE) { # \\dontrun{ slsTables <- bridgeAccess( \"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\", tables = c(\"Catch\", \"FishCodes\", \"Lengths\", \"Meter Corrections\", \"SLS Stations\", \"Tow Info\", \"Water Info\") )  schema <- bridgeAccess( \"https://filelib.wildlife.ca.gov/Public/Delta%20Smelt/SLS.zip\", tables = c(\"MSysRelationships\"))[[1]]  schemaJoin(schema, slsTables) } # }"},{"path":"https://trinhxuann.github.io/deltadata/reference/scrapeForm.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","title":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","text":"function allows users submit form query return resulting session. field arguments specified, function return available fields options users select. function created SacPas webpages mind theoretically work webpage static form interface.","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/scrapeForm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","text":"","code":"scrapeForm(url, formIndex = NULL, ..., returnForm = F)"},{"path":"https://trinhxuann.github.io/deltadata/reference/scrapeForm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","text":"url URL containing form(s) interest formIndex argument required 1 form webpage. numeric index indicating form interest ... Field names appropriate options submit query. Can left empty get back list available fields options. Fields allowing multiple selections provided vector. returnForm Logical, return html form TRUE","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/scrapeForm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape, fill, and submit a static html form from the SacPas website — scrapeForm","text":"rvest_session","code":""},{"path":[]},{"path":"https://trinhxuann.github.io/deltadata/reference/towSchedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Tow schedules of IEP surveys — towSchedule","title":"Tow schedules of IEP surveys — towSchedule","text":"Replicated tow schedules IEP surveys","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/towSchedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tow schedules of IEP surveys — towSchedule","text":"","code":"towSchedule"},{"path":"https://trinhxuann.github.io/deltadata/reference/towSchedule.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tow schedules of IEP surveys — towSchedule","text":"list data frames survey. data frame 4 columns duration Tow duration maxDepth Maximum depth recorded sampling location depth Depth range label created cut() function cableLength Length cable let ","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Water year type of a date — wytDate","title":"Water year type of a date — wytDate","text":"Water year type date","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Water year type of a date — wytDate","text":"","code":"wytDate(date, wyt, valley = c(\"sac\", \"sjr\"), value = c(\"wyt\", \"index\"))"},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Water year type of a date — wytDate","text":"date single vector dates, date format wyt data frame official wyt pullWyt function valley system, either \"sac\" \"sjr\" value value return, either \"wyt\" \"index\"","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Water year type of a date — wytDate","text":"Returns water year type index classification associated date(s)","code":""},{"path":"https://trinhxuann.github.io/deltadata/reference/wytDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Water year type of a date — wytDate","text":"","code":"if (FALSE) { # \\dontrun{ wytTable <- pullWyt() randomDates <- sample(0:5000, 100, replace = TRUE) + as.Date(\"2010-01-01\") wytDate(randomDates, wyt = wytTable$officialWyt) } # }"}]
